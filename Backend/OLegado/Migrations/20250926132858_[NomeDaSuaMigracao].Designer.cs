// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OLegado.Data;

#nullable disable

namespace OLegado.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250926132858_[NomeDaSuaMigracao]")]
    partial class NomeDaSuaMigracao
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OLegado.Entities.Cla", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clas");
                });

            modelBuilder.Entity("OLegado.Entities.Filme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Filmes");
                });

            modelBuilder.Entity("OLegado.Entities.Livro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("LivroId")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LivroId");

                    b.ToTable("Livros");
                });

            modelBuilder.Entity("OLegado.Entities.Personagem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClaId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FotoURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Idade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Poder")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoCriaturaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClaId");

                    b.HasIndex("TipoCriaturaId");

                    b.ToTable("Personagens");
                });

            modelBuilder.Entity("OLegado.Entities.PersonagemFilme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FilmeId")
                        .HasColumnType("int");

                    b.Property<int>("PersonagemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FilmeId");

                    b.HasIndex("PersonagemId");

                    b.ToTable("PersonagemFilmes");
                });

            modelBuilder.Entity("OLegado.Entities.PersonagemLivro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LivroId")
                        .HasColumnType("int");

                    b.Property<int>("PersonagemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LivroId");

                    b.HasIndex("PersonagemId");

                    b.ToTable("GetPersonagemLivros");
                });

            modelBuilder.Entity("OLegado.Entities.TipoCriatura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TipoCriaturas");
                });

            modelBuilder.Entity("OLegado.Entities.Livro", b =>
                {
                    b.HasOne("OLegado.Entities.Livro", null)
                        .WithMany("livros")
                        .HasForeignKey("LivroId");
                });

            modelBuilder.Entity("OLegado.Entities.Personagem", b =>
                {
                    b.HasOne("OLegado.Entities.Cla", "Cla")
                        .WithMany()
                        .HasForeignKey("ClaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OLegado.Entities.TipoCriatura", "TipoCriatura")
                        .WithMany("Personagens")
                        .HasForeignKey("TipoCriaturaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cla");

                    b.Navigation("TipoCriatura");
                });

            modelBuilder.Entity("OLegado.Entities.PersonagemFilme", b =>
                {
                    b.HasOne("OLegado.Entities.Filme", "TituloF")
                        .WithMany("PersonagemFilmes")
                        .HasForeignKey("FilmeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OLegado.Entities.Personagem", "PersonagemF")
                        .WithMany()
                        .HasForeignKey("PersonagemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonagemF");

                    b.Navigation("TituloF");
                });

            modelBuilder.Entity("OLegado.Entities.PersonagemLivro", b =>
                {
                    b.HasOne("OLegado.Entities.Livro", "TituloL")
                        .WithMany()
                        .HasForeignKey("LivroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OLegado.Entities.Personagem", "PersonagemL")
                        .WithMany()
                        .HasForeignKey("PersonagemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonagemL");

                    b.Navigation("TituloL");
                });

            modelBuilder.Entity("OLegado.Entities.Filme", b =>
                {
                    b.Navigation("PersonagemFilmes");
                });

            modelBuilder.Entity("OLegado.Entities.Livro", b =>
                {
                    b.Navigation("livros");
                });

            modelBuilder.Entity("OLegado.Entities.TipoCriatura", b =>
                {
                    b.Navigation("Personagens");
                });
#pragma warning restore 612, 618
        }
    }
}
